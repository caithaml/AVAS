**********************
Windows PowerShell transcript start
Start time: 20171006141226
Username: DESKTOP-TBE27PS\lukas
RunAs User: DESKTOP-TBE27PS\lukas
Configuration Name: 
Machine: DESKTOP-TBE27PS (Microsoft Windows NT 10.0.17004.0)
Host Application: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command & 'C:\Users\lukas\.vscode\extensions\ms-vscode.powershell-1.4.3\scripts\Start-EditorServices.ps1' -EditorServicesVersion '1.4.1' -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '1.4.3' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'C:\Users\lukas\.vscode\extensions\ms-vscode.powershell-1.4.3\modules' -EnableConsoleRepl -LogLevel 'Normal' -LogPath 'C:\Users\lukas\.vscode\extensions\ms-vscode.powershell-1.4.3\logs\1507291023-fefd648d-2383-4c1c-b588-3a7f691adaee1507291017262\EditorServices.log' -SessionDetailsPath 'C:\Users\lukas\.vscode\extensions\ms-vscode.powershell-1.4.3\sessions\PSES-VSCode-13620-164239' -FeatureFlags @()
Process ID: 14500
PSVersion: 5.1.17004.1000
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.17004.1000
BuildVersion: 10.0.17004.1000
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-12-26.txt
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-12-28.txt
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Verbose"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Verbose"

NAME
    Write-Verbose

SYNOPSIS
    Writes text to the verbose message stream.


SYNTAX
    Write-Verbose [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Verbose cmdlet writes text to the verbose message stream in Windows PowerShell. Typically, the verbose message stream is used to deliver information about command processing that is used for debugging a
    command.

    By default, the verbose message stream is not displayed, but you can display it by changing the value of the $VerbosePreference variable or using the Verbose common parameter in any command.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821880
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Verbose -examples".
    For more information, type: "get-help Write-Verbose -detailed".
    For technical information, type: "get-help Write-Verbose -full".
    For online help, type: "get-help Write-Verbose -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Verbose"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Verbose"

NAME
    Write-Verbose

SYNOPSIS
    Writes text to the verbose message stream.


SYNTAX
    Write-Verbose [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Verbose cmdlet writes text to the verbose message stream in Windows PowerShell. Typically, the verbose message stream is used to deliver information about command processing that is used for debugging a
    command.

    By default, the verbose message stream is not displayed, but you can display it by changing the value of the $VerbosePreference variable or using the Verbose common parameter in any command.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821880
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Verbose -examples".
    For more information, type: "get-help Write-Verbose -detailed".
    For technical information, type: "get-help Write-Verbose -full".
    For online help, type: "get-help Write-Verbose -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Verbose"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Verbose"

NAME
    Write-Verbose

SYNOPSIS
    Writes text to the verbose message stream.


SYNTAX
    Write-Verbose [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Verbose cmdlet writes text to the verbose message stream in Windows PowerShell. Typically, the verbose message stream is used to deliver information about command processing that is used for debugging a
    command.

    By default, the verbose message stream is not displayed, but you can display it by changing the value of the $VerbosePreference variable or using the Verbose common parameter in any command.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821880
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Verbose -examples".
    For more information, type: "get-help Write-Verbose -detailed".
    For technical information, type: "get-help Write-Verbose -full".
    For online help, type: "get-help Write-Verbose -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Verbose"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Verbose"

NAME
    Write-Verbose

SYNOPSIS
    Writes text to the verbose message stream.


SYNTAX
    Write-Verbose [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Verbose cmdlet writes text to the verbose message stream in Windows PowerShell. Typically, the verbose message stream is used to deliver information about command processing that is used for debugging a
    command.

    By default, the verbose message stream is not displayed, but you can display it by changing the value of the $VerbosePreference variable or using the Verbose common parameter in any command.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821880
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Verbose -examples".
    For more information, type: "get-help Write-Verbose -detailed".
    For technical information, type: "get-help Write-Verbose -full".
    For online help, type: "get-help Write-Verbose -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Verbose"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Verbose"

NAME
    Write-Verbose

SYNOPSIS
    Writes text to the verbose message stream.


SYNTAX
    Write-Verbose [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Verbose cmdlet writes text to the verbose message stream in Windows PowerShell. Typically, the verbose message stream is used to deliver information about command processing that is used for debugging a
    command.

    By default, the verbose message stream is not displayed, but you can display it by changing the value of the $VerbosePreference variable or using the Verbose common parameter in any command.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821880
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Verbose -examples".
    For more information, type: "get-help Write-Verbose -detailed".
    For technical information, type: "get-help Write-Verbose -full".
    For online help, type: "get-help Write-Verbose -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Warning"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Warning                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Warning"

NAME
    Write-Warning

SYNOPSIS
    Writes a warning message.


SYNTAX
    Write-Warning [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Warning cmdlet writes a warning message to the Windows PowerShell host. The response to the warning depends on the value of the user's $WarningPreference variable and the use of the WarningAction common
    parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821881
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Verbose

REMARKS
    To see the examples, type: "get-help Write-Warning -examples".
    For more information, type: "get-help Write-Warning -detailed".
    For technical information, type: "get-help Write-Warning -full".
    For online help, type: "get-help Write-Warning -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Warning"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Warning                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Warning"

NAME
    Write-Warning

SYNOPSIS
    Writes a warning message.


SYNTAX
    Write-Warning [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Warning cmdlet writes a warning message to the Windows PowerShell host. The response to the warning depends on the value of the user's $WarningPreference variable and the use of the WarningAction common
    parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821881
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Verbose

REMARKS
    To see the examples, type: "get-help Write-Warning -examples".
    For more information, type: "get-help Write-Warning -detailed".
    For technical information, type: "get-help Write-Warning -full".
    For online help, type: "get-help Write-Warning -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Warning"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Warning                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Warning"

NAME
    Write-Warning

SYNOPSIS
    Writes a warning message.


SYNTAX
    Write-Warning [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Warning cmdlet writes a warning message to the Windows PowerShell host. The response to the warning depends on the value of the user's $WarningPreference variable and the use of the WarningAction common
    parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821881
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Verbose

REMARKS
    To see the examples, type: "get-help Write-Warning -examples".
    For more information, type: "get-help Write-Warning -detailed".
    For technical information, type: "get-help Write-Warning -full".
    For online help, type: "get-help Write-Warning -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-12-41.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Warning"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Warning                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Warning"

NAME
    Write-Warning

SYNOPSIS
    Writes a warning message.


SYNTAX
    Write-Warning [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Warning cmdlet writes a warning message to the Windows PowerShell host. The response to the warning depends on the value of the user's $WarningPreference variable and the use of the WarningAction common
    parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821881
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Verbose

REMARKS
    To see the examples, type: "get-help Write-Warning -examples".
    For more information, type: "get-help Write-Warning -detailed".
    For technical information, type: "get-help Write-Warning -full".
    For online help, type: "get-help Write-Warning -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Date"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Date                                           3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="ConvertFrom-Json"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          ConvertFrom-Json                                   3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="ConvertFrom-Json"

NAME
    ConvertFrom-Json

SYNOPSIS
    Converts a JSON-formatted string to a custom object.


SYNTAX
    ConvertFrom-Json [-InputObject] <String> [<CommonParameters>]


DESCRIPTION
    The ConvertFrom-Json cmdlet converts a JavaScript Object Notation (JSON) formatted string to a custom PSCustomObject object that has a property for each field in the JSON string. JSON is commonly used by web sites
     to provide a textual representation of objects.

    To generate a JSON string from any object, use the ConvertTo-Json cmdlet.

    This cmdlet was introduced in Windows PowerShell 3.0.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821753
    An Introduction to JavaScript Object Notation (JSON) in JavaScript and .NET http://msdn.microsoft.com/en-us/library/bb299886.aspx
    ConvertTo-Json
    Invoke-WebRequest
    Invoke-RestMethod

REMARKS
    To see the examples, type: "get-help ConvertFrom-Json -examples".
    For more information, type: "get-help ConvertFrom-Json -detailed".
    For technical information, type: "get-help ConvertFrom-Json -full".
    For online help, type: "get-help ConvertFrom-Json -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="ibtsiva.exe"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Application     ibtsiva.exe                                        19.10.1... C:\WINDOWS\system32\ibtsiva.exe


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="W:"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        W:


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="W:"

NAME
    W:

SYNTAX
    W:


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-VolumeCache"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        Write-VolumeCache                                  2.0.0.0    Storage


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-VolumeCache"

NAME
    Write-VolumeCache

SYNOPSIS
    Writes the file system cache to disk.


SYNTAX
    Write-VolumeCache [-DriveLetter] <Char[]> [-CimSession <CimSession[]>] [-PassThru] [-ThrottleLimit <Int32>] [<CommonParameters>]

    Write-VolumeCache [-CimSession <CimSession[]>] [-PassThru] [-ThrottleLimit <Int32>] -FileSystemLabel <String[]> [<CommonParameters>]

    Write-VolumeCache [-CimSession <CimSession[]>] [-PassThru] [-ThrottleLimit <Int32>] -Path <String[]> [<CommonParameters>]

    Write-VolumeCache [-CimSession <CimSession[]>] [-PassThru] [-ThrottleLimit <Int32>] -ObjectId <String[]> [<CommonParameters>]

    Write-VolumeCache [-CimSession <CimSession[]>] [-PassThru] [-ThrottleLimit <Int32>] [<CommonParameters>]


DESCRIPTION
    The Write-VolumeCache cmdlet writes the file system cache to disk. By default, Windows caches file data to be written to disk in a special memory area before writing the data to disk.

    This cmdlet enables you to forcibly empty, or flush, the write cache by writing it to disk.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=816506

REMARKS
    To see the examples, type: "get-help Write-VolumeCache -examples".
    For more information, type: "get-help Write-VolumeCache -detailed".
    For technical information, type: "get-help Write-VolumeCache -full".
    For online help, type: "get-help Write-VolumeCache -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           write -> Write-Output


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Host"

NAME
    Write-Host

SYNOPSIS
    Writes customized output to a host.


SYNTAX
    Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-Foregrou
    ndColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] [-Separator <Object>] [<CommonParameter
    s>]


DESCRIPTION
    The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator par
    ameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting Windows PowerShell.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821876
    Clear-Host
    Write-Debug
    Write-Error
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Host -examples".
    For more information, type: "get-help Write-Host -detailed".
    For technical information, type: "get-help Write-Host -full".
    For online help, type: "get-help Write-Host -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Host"

NAME
    Write-Host

SYNOPSIS
    Writes customized output to a host.


SYNTAX
    Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-Foregrou
    ndColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] [-Separator <Object>] [<CommonParameter
    s>]


DESCRIPTION
    The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator par
    ameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting Windows PowerShell.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821876
    Clear-Host
    Write-Debug
    Write-Error
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Host -examples".
    For more information, type: "get-help Write-Host -detailed".
    For technical information, type: "get-help Write-Host -full".
    For online help, type: "get-help Write-Host -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="easinvoker.exe"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Application     easinvoker.exe                                     10.0.17... C:\WINDOWS\system32\easinvoker.exe


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="elu"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           elu -> Enable-LocalUser                            1.0.0.0    Microsoft.PowerShell.LocalAccounts


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-12.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-13.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-14.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-15.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-16.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-19.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> d:\SICZ\avas\avas.ps1
At D:\SICZ\avas\avas.ps1:88 char:1
+ }
+ ~
Unexpected token '}' in expression or statement.
>> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"
PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-16-59.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-17-41.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> d:\SICZ\avas\avas.ps1
At D:\SICZ\avas\avas.ps1:65 char:17
+ function appdiff
+                 ~
Missing function body in function declaration.
>> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Host"

NAME
    Write-Host

SYNOPSIS
    Writes customized output to a host.


SYNTAX
    Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-Foregrou
    ndColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] [-Separator <Object>] [<CommonParameter
    s>]


DESCRIPTION
    The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator par
    ameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting Windows PowerShell.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821876
    Clear-Host
    Write-Debug
    Write-Error
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Host -examples".
    For more information, type: "get-help Write-Host -detailed".
    For technical information, type: "get-help Write-Host -full".
    For online help, type: "get-help Write-Host -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="$line2"
PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-18-36.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-18-40.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-19-36.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-20-05.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"
PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"

DisplayName                                 DisplayVersion Publisher
-----------                                 -------------- ---------
Universal CRT Extension SDK                 10.0.26624     Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.1.15063.468 Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.0.26624     Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25506    Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25507    Microsoft Corporation
Universal CRT Extension SDK                 10.1.15063.468 Microsoft Corporation


PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-11.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas\AVAS_LuKA> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-23.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-47.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-49.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-51.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-52.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-53.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-22-54.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="ac"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           ac -> Add-Content


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-23-01.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-23-02.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Select-Object"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Select-Object                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Select-Object"

NAME
    Select-Object

SYNOPSIS
    Selects objects or object properties.


SYNTAX
    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-First <Int32>] [-InputObject <PSObject>] [-Last <Int32>] [-Skip <Int32>] [-Unique] [-Wait] [<CommonParameters>]

    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-InputObject <PSObject>] [-SkipLast <Int32>] [-Unique] [<CommonParameters>]

    Select-Object [-Index <Int32[]>] [-InputObject <PSObject>] [-Unique] [-Wait] [<CommonParameters>]


DESCRIPTION
    The Select-Object cmdlet selects specified properties of an object or set of objects. It can also select unique objects, a specified number of objects, or objects in a specified position in an array.

    To select objects from a collection, use the First , Last , Unique , Skip , and Index parameters. To select object properties, use the Property parameter. When you select properties, Select-Object returns new obje
    cts that have only the specified properties.

    Beginning in Windows PowerShell 3.0, Select-Object includes an optimization feature that prevents commands from creating and processing objects that are not used. When you include a Select-Object command with the
    First or Index parameter in a command pipeline, Windows PowerShell stops the command that generates the objects as soon as the selected number of objects is generated, even when the command that generates the obje
    cts appears before the Select-Object command in the pipeline. To turn off this optimizing behavior, use the Wait parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821852
    Group-Object
    Sort-Object

REMARKS
    To see the examples, type: "get-help Select-Object -examples".
    For more information, type: "get-help Select-Object -detailed".
    For technical information, type: "get-help Select-Object -full".
    For online help, type: "get-help Select-Object -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"

DisplayName                                 DisplayVersion Publisher
-----------                                 -------------- ---------
Universal CRT Extension SDK                 10.0.26624     Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.1.15063.468 Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.0.26624     Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25506    Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25507    Microsoft Corporation
Universal CRT Extension SDK                 10.1.15063.468 Microsoft Corporation


PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Out-GridView"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Out-GridView                                       3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Out-GridView"

NAME
    Out-GridView

SYNOPSIS
    Sends output to an interactive table in a separate window.


SYNTAX
    Out-GridView [-InputObject <PSObject>] [-OutputMode {None | Single | Multiple}] [-Title <String>] [<CommonParameters>]

    Out-GridView [-InputObject <PSObject>] [-PassThru] [-Title <String>] [<CommonParameters>]

    Out-GridView [-InputObject <PSObject>] [-Title <String>] [-Wait] [<CommonParameters>]


DESCRIPTION
    The Out-GridView cmdlet sends the output from a command to a grid view window where the output is displayed in an interactive table.

    Because this cmdlet requires a user interface, it does not work on Server Core installations of Windows Server.

    You can use the following features of the table to examine your data:

    - Hide, Show, and Reorder Columns: To hide, show, or reorder a column, right-click a column header and then click Select Columns.

    - Sort. To sort the data, click a column header. Click again to toggle from ascending to descending order.

    - Quick Filter. Use the Filter box at the top of the window to search the text in the table. You can search for text in a particular column, search for literals, and search for multiple words.

    - Criteria Filter. Use the Add criteria drop-down menu to create rules to filter the data. This is very useful for very large data sets, such as event logs.

    - Copy and paste. To copy rows of data from Out-GridView , press CTRL+C (copy). You can paste the data into any text or spreadsheet program.

    For instructions for using these features, type `Get-Help Out-GridView -Full` and see How to Use the Grid View Window Features in the Notes section.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821840
    Out-File
    Out-Printer
    Out-String

REMARKS
    To see the examples, type: "get-help Out-GridView -examples".
    For more information, type: "get-help Out-GridView -detailed".
    For technical information, type: "get-help Out-GridView -full".
    For online help, type: "get-help Out-GridView -online"


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"

DisplayName                                 DisplayVersion Publisher
-----------                                 -------------- ---------
Universal CRT Extension SDK                 10.0.26624     Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.1.15063.468 Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.0.26624     Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25506    Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25507    Microsoft Corporation
Universal CRT Extension SDK                 10.1.15063.468 Microsoft Corporation


PS D:\SICZ\avas\AVAS_LuKA> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"

DisplayName                                 DisplayVersion Publisher
-----------                                 -------------- ---------
Universal CRT Extension SDK                 10.0.26624     Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.1.15063.468 Microsoft Corporation
Universal CRT Headers Libraries and Sources 10.0.26624     Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25506    Microsoft Corporation
Visual C++ Library CRT Appx Package         14.11.25507    Microsoft Corporation
Universal CRT Extension SDK                 10.1.15063.468 Microsoft Corporation


PS D:\SICZ\avas\AVAS_LuKA> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Select-Object"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Select-Object                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Select-Object"

NAME
    Select-Object

SYNOPSIS
    Selects objects or object properties.


SYNTAX
    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-First <Int32>] [-InputObject <PSObject>] [-Last <Int32>] [-Skip <Int32>] [-Unique] [-Wait] [<CommonParameters>]

    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-InputObject <PSObject>] [-SkipLast <Int32>] [-Unique] [<CommonParameters>]

    Select-Object [-Index <Int32[]>] [-InputObject <PSObject>] [-Unique] [-Wait] [<CommonParameters>]


DESCRIPTION
    The Select-Object cmdlet selects specified properties of an object or set of objects. It can also select unique objects, a specified number of objects, or objects in a specified position in an array.

    To select objects from a collection, use the First , Last , Unique , Skip , and Index parameters. To select object properties, use the Property parameter. When you select properties, Select-Object returns new obje
    cts that have only the specified properties.

    Beginning in Windows PowerShell 3.0, Select-Object includes an optimization feature that prevents commands from creating and processing objects that are not used. When you include a Select-Object command with the
    First or Index parameter in a command pipeline, Windows PowerShell stops the command that generates the objects as soon as the selected number of objects is generated, even when the command that generates the obje
    cts appears before the Select-Object command in the pipeline. To turn off this optimizing behavior, use the Wait parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821852
    Group-Object
    Sort-Object

REMARKS
    To see the examples, type: "get-help Select-Object -examples".
    For more information, type: "get-help Select-Object -detailed".
    For technical information, type: "get-help Select-Object -full".
    For online help, type: "get-help Select-Object -online"


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Select-Object"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Select-Object                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Select-Object"

NAME
    Select-Object

SYNOPSIS
    Selects objects or object properties.


SYNTAX
    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-First <Int32>] [-InputObject <PSObject>] [-Last <Int32>] [-Skip <Int32>] [-Unique] [-Wait] [<CommonParameters>]

    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-InputObject <PSObject>] [-SkipLast <Int32>] [-Unique] [<CommonParameters>]

    Select-Object [-Index <Int32[]>] [-InputObject <PSObject>] [-Unique] [-Wait] [<CommonParameters>]


DESCRIPTION
    The Select-Object cmdlet selects specified properties of an object or set of objects. It can also select unique objects, a specified number of objects, or objects in a specified position in an array.

    To select objects from a collection, use the First , Last , Unique , Skip , and Index parameters. To select object properties, use the Property parameter. When you select properties, Select-Object returns new obje
    cts that have only the specified properties.

    Beginning in Windows PowerShell 3.0, Select-Object includes an optimization feature that prevents commands from creating and processing objects that are not used. When you include a Select-Object command with the
    First or Index parameter in a command pipeline, Windows PowerShell stops the command that generates the objects as soon as the selected number of objects is generated, even when the command that generates the obje
    cts appears before the Select-Object command in the pipeline. To turn off this optimizing behavior, use the Wait parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821852
    Group-Object
    Sort-Object

REMARKS
    To see the examples, type: "get-help Select-Object -examples".
    For more information, type: "get-help Select-Object -detailed".
    For technical information, type: "get-help Select-Object -full".
    For online help, type: "get-help Select-Object -online"


PS D:\SICZ\avas\AVAS_LuKA> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-24-24.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas\AVAS_LuKA> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="-message"
PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Verbose"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Verbose"

NAME
    Write-Verbose

SYNOPSIS
    Writes text to the verbose message stream.


SYNTAX
    Write-Verbose [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Verbose cmdlet writes text to the verbose message stream in Windows PowerShell. Typically, the verbose message stream is used to deliver information about command processing that is used for debugging a
    command.

    By default, the verbose message stream is not displayed, but you can display it by changing the value of the $VerbosePreference variable or using the Verbose common parameter in any command.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821880
    Write-Debug
    Write-Error
    Write-Host
    Write-Information
    Write-Output
    Write-Progress
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Verbose -examples".
    For more information, type: "get-help Write-Verbose -detailed".
    For technical information, type: "get-help Write-Verbose -full".
    For online help, type: "get-help Write-Verbose -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-25-21.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-11.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-15.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-18.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="W:"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        W:


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="W:"

NAME
    W:

SYNTAX
    W:


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Debug"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Debug"

NAME
    Write-Debug

SYNOPSIS
    Writes a debug message to the console.


SYNTAX
    Write-Debug [-Message] <String> [<CommonParameters>]


DESCRIPTION
    The Write-Debug cmdlet writes debug messages to the console from a script or command.

    By default, debug messages are not displayed in the console, but you can display them by using the Debug parameter or the $DebugPreference variable.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821874
    Write-Error
    Write-Host
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Debug -examples".
    For more information, type: "get-help Write-Debug -detailed".
    For technical information, type: "get-help Write-Debug -full".
    For online help, type: "get-help Write-Debug -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Host"

NAME
    Write-Host

SYNOPSIS
    Writes customized output to a host.


SYNTAX
    Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-Foregrou
    ndColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] [-Separator <Object>] [<CommonParameter
    s>]


DESCRIPTION
    The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator par
    ameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting Windows PowerShell.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821876
    Clear-Host
    Write-Debug
    Write-Error
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Host -examples".
    For more information, type: "get-help Write-Host -detailed".
    For technical information, type: "get-help Write-Host -full".
    For online help, type: "get-help Write-Host -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Host"

NAME
    Write-Host

SYNOPSIS
    Writes customized output to a host.


SYNTAX
    Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-Foregrou
    ndColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] [-Separator <Object>] [<CommonParameter
    s>]


DESCRIPTION
    The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator par
    ameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting Windows PowerShell.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821876
    Clear-Host
    Write-Debug
    Write-Error
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Host -examples".
    For more information, type: "get-help Write-Host -detailed".
    For technical information, type: "get-help Write-Host -full".
    For online help, type: "get-help Write-Host -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Write-Host"

NAME
    Write-Host

SYNOPSIS
    Writes customized output to a host.


SYNTAX
    Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-Foregrou
    ndColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] [-Separator <Object>] [<CommonParameter
    s>]


DESCRIPTION
    The Write-Host cmdlet customizes output. You can specify the color of text by using the ForegroundColor parameter, and you can specify the background color by using the BackgroundColor parameter. The Separator par
    ameter lets you specify a string to use to separate displayed objects. The particular result depends on the program that is hosting Windows PowerShell.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821876
    Clear-Host
    Write-Debug
    Write-Error
    Write-Output
    Write-Progress
    Write-Verbose
    Write-Warning

REMARKS
    To see the examples, type: "get-help Write-Host -examples".
    For more information, type: "get-help Write-Host -detailed".
    For technical information, type: "get-help Write-Host -full".
    For online help, type: "get-help Write-Host -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-39.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-41.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-42.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-44.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-26-46.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-27-27.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-27-50.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Select-Object"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Select-Object                                      3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Select-Object"

NAME
    Select-Object

SYNOPSIS
    Selects objects or object properties.


SYNTAX
    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-First <Int32>] [-InputObject <PSObject>] [-Last <Int32>] [-Skip <Int32>] [-Unique] [-Wait] [<CommonParameters>]

    Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-InputObject <PSObject>] [-SkipLast <Int32>] [-Unique] [<CommonParameters>]

    Select-Object [-Index <Int32[]>] [-InputObject <PSObject>] [-Unique] [-Wait] [<CommonParameters>]


DESCRIPTION
    The Select-Object cmdlet selects specified properties of an object or set of objects. It can also select unique objects, a specified number of objects, or objects in a specified position in an array.

    To select objects from a collection, use the First , Last , Unique , Skip , and Index parameters. To select object properties, use the Property parameter. When you select properties, Select-Object returns new obje
    cts that have only the specified properties.

    Beginning in Windows PowerShell 3.0, Select-Object includes an optimization feature that prevents commands from creating and processing objects that are not used. When you include a Select-Object command with the
    First or Index parameter in a command pipeline, Windows PowerShell stops the command that generates the objects as soon as the selected number of objects is generated, even when the command that generates the obje
    cts appears before the Select-Object command in the pipeline. To turn off this optimizing behavior, use the Wait parameter.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821852
    Group-Object
    Sort-Object

REMARKS
    To see the examples, type: "get-help Select-Object -examples".
    For more information, type: "get-help Select-Object -detailed".
    For technical information, type: "get-help Select-Object -full".
    For online help, type: "get-help Select-Object -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Content"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Content"

NAME
    Get-Content

SYNOPSIS
    Gets the contents of a file.


SYNTAX
    Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>
    ] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [
    -Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

    Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransacti
    on] [<CommonParameters>]


DESCRIPTION
    The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which rep
    resents a line of content.

    Beginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.
    In file system drives, you can use the the Get-Content cmdlet to get content that you display at the command line, save in a variable for processing, or write to another file. It is not valid on folders.

    Note: This custom cmdlet help file explains how the Get-Content cmdlet works in a file system drive. For information about the Get-Content cmdlet in all drives, type "Get-Help Get-Content -Path $null" or see Get-C
    ontent at http://go.microsoft.com/fwlink/?LinkID=113310.


RELATED LINKS
    Online version: http://technet.microsoft.com/library/hh847788(v=wps.630).aspx
    Get-Content (generic); http://go.microsoft.com/fwlink/?LinkID=113310
    FileSystem Provider
    Clear-Content
    Get-Content
    Get-ChildItem
    Get-Content
    Get-Item
    Remove-Item
    Set-Content
    Test-Path

REMARKS
    To see the examples, type: "get-help Get-Content -examples".
    For more information, type: "get-help Get-Content -detailed".
    For technical information, type: "get-help Get-Content -full".
    For online help, type: "get-help Get-Content -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-41.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="appdiff"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        appdiff


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="appdiff"

NAME
    appdiff

SYNTAX
    appdiff


ALIASES
    None


REMARKS
    None



PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-45.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-47.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-50.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-51.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-52.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-53.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-54.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-55.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-56.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-57.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-31-59.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-00.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-01.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-03.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-04.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-05.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-06.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-07.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:28 char:4
+    Start-Transcript -Path "$scriptpath/vypis$(Get-Date -Format yyyy-M ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-08.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-09.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/vypis2017-10-06-02-32-10.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Get-Date"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Date                                           3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Get-Date"

NAME
    Get-Date

SYNOPSIS
    Gets the current date and time.


SYNTAX
    Get-Date [[-Date] <DateTime>] [-Day <Int32>] [-DisplayHint {Date | Time | DateTime}] [-Format <String>] [-Hour <Int32>] [-Millisecond <Int32>] [-Minute <Int32>] [-Month <Int32>] [-Second <Int32>] [-Year <Int32>] [
    <CommonParameters>]

    Get-Date [[-Date] <DateTime>] [-Day <Int32>] [-DisplayHint {Date | Time | DateTime}] [-Hour <Int32>] [-Millisecond <Int32>] [-Minute <Int32>] [-Month <Int32>] [-Second <Int32>] [-UFormat <String>] [-Year <Int32>]
    [<CommonParameters>]


DESCRIPTION
    The Get-Date cmdlet gets a DateTime object that represents the current date or a date that you specify. It can format the date and time in several Windows and UNIX formats. You can use Get-Date to generate a date
    or time character string, and then send the string to other cmdlets or programs.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821781
    New-TimeSpan
    Set-Date

REMARKS
    To see the examples, type: "get-help Get-Date -examples".
    For more information, type: "get-help Get-Date -detailed".
    For technical information, type: "get-help Get-Date -full".
    For online help, type: "get-help Get-Date -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="ForEach-Object"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          ForEach-Object                                     3.0.0.0    Microsoft.PowerShell.Core


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="ForEach-Object"

NAME
    ForEach-Object

SYNOPSIS
    Performs an operation against each item in a collection of input objects.


SYNTAX
    ForEach-Object [-MemberName] <String> [-ArgumentList <Object[]>] [-Confirm] [-InputObject <PSObject>] [-WhatIf] [<CommonParameters>]

    ForEach-Object [-Process] <ScriptBlock[]> [-Begin <ScriptBlock>] [-Confirm] [-End <ScriptBlock>] [-InputObject <PSObject>] [-RemainingScripts <ScriptBlock[]>] [-WhatIf] [<CommonParameters>]


DESCRIPTION
    The ForEach-Object cmdlet performs an operation on each item in a collection of input objects. The input objects can be piped to the cmdlet or specified by using the InputObject parameter.

    Starting in Windows PowerShell 3.0, there are two different ways to construct a ForEach-Object command. Script block . You can use a script block to specify the operation. Within the script block, use the $_ varia
    ble to represent the current object. The script block is the value of the Process parameter. The script block can contain any Windows PowerShell script.

    For example, the following command gets the value of the ProcessName property of each process on the computer.

    `Get-Process | ForEach-Object {$_.ProcessName}` Operation statement . You can also write an operation statement, which is much more like natural language. You can use the operation statement to specify a property
    value or call a method. Operation statements were introduced in Windows PowerShell 3.0.

    For example, the following command also gets the value of the ProcessName property of each process on the computer.

    `Get-Process | ForEach-Object ProcessName`

    When using the script block format, in addition to using the script block that describes the operations that are performed on each input object, you can provide two additional script blocks. The Begin script block
    , which is the value of the Begin parameter, runs before this cmdlet processes the first input object. The End script block, which is the value of the End parameter, runs after this cmdlet processes the last input
     object.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821481

REMARKS
    To see the examples, type: "get-help ForEach-Object -examples".
    For more information, type: "get-help ForEach-Object -detailed".
    For technical information, type: "get-help ForEach-Object -full".
    For online help, type: "get-help ForEach-Object -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-06.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-07.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-08.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-09.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-10.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-12.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-13.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-14.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-15.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-16.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-17.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-18.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-19.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-20.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-21.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-22.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-23.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-24.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-35-25.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-16.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-18.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-18.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-19.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-21.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-21.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-22.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-23.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-24.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-24.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-25.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-26.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-27.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Start-Transcript"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Start-Transcript                                   3.0.0.0    Microsoft.PowerShell.Host


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Start-Transcript"

NAME
    Start-Transcript

SYNOPSIS
    Creates a record of all or part of a Windows PowerShell session to a text file.


SYNTAX
    Start-Transcript [[-LiteralPath] <String>] [-Append] [-Confirm] [-Force] [-IncludeInvocationHeader] [-NoClobber] [-WhatIf] [<CommonParameters>]

    Start-Transcript [[-OutputDirectory] <String>] [-Append] [-Confirm] [-Force] [-IncludeInvocationHeader] [-NoClobber] [-WhatIf] [<CommonParameters>]

    Start-Transcript [[-Path] <String>] [-Append] [-Confirm] [-Force] [-IncludeInvocationHeader] [-NoClobber] [-WhatIf] [<CommonParameters>]


DESCRIPTION
    The Start-Transcript cmdlet creates a record of all or part of a Windows PowerShell session to a text file. The transcript includes all command that the user types and all output that appears on the console.

    Starting in Windows PowerShell 5.0, Start-Transcript includes the host name in the generated file name of all transcripts. This is especially useful when your enterprise's logging is centralized. Files that are cr
    eated by the Start-Transcript cmdlet include random characters in names to prevent potential overwrites or duplication when two or more transcripts are started simultaneously. This also prevents unauthorized disco
    very of transcripts that are stored in a centralized file share. Additionally in Windows PowerShell 5.0, the Start-Transcript cmdlet works in Windows PowerShell ISE.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821532
    Stop-Transcript

REMARKS
    To see the examples, type: "get-help Start-Transcript -examples".
    For more information, type: "get-help Start-Transcript -detailed".
    For technical information, type: "get-help Start-Transcript -full".
    For online help, type: "get-help Start-Transcript -online"


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-29.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-30.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-31.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-32.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-33.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-34.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-35.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-36.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-36.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-37.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-38.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-38.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-36-39.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
PS D:\SICZ\avas> TerminatingError(Start-Transcript): "Transcription cannot be started."
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand
Start-Transcript : Transcription cannot be started.
At D:\SICZ\avas\avas.ps1:32 char:4
+    Start-Transcript -Path "$scriptpath/debug-$(Get-Date -Format yyyy- ...
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [Start-Transcript], PSInvalidOperationException
    + FullyQualifiedErrorId : CannotStartTranscription,Microsoft.PowerShell.Commands.StartTranscriptCommand

WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-38-17.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-38-23.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-42-53.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-42-58.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-42-59.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-43-03.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-43-38.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-43-43.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Start-Transcript"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Start-Transcript                                   3.0.0.0    Microsoft.PowerShell.Host


PS D:\SICZ\avas> CommandInvocation(Get-Help): "Get-Help"
>> ParameterBinding(Get-Help): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Help): name="Name"; value="Start-Transcript"

NAME
    Start-Transcript

SYNOPSIS
    Creates a record of all or part of a Windows PowerShell session to a text file.


SYNTAX
    Start-Transcript [[-LiteralPath] <String>] [-Append] [-Confirm] [-Force] [-IncludeInvocationHeader] [-NoClobber] [-WhatIf] [<CommonParameters>]

    Start-Transcript [[-OutputDirectory] <String>] [-Append] [-Confirm] [-Force] [-IncludeInvocationHeader] [-NoClobber] [-WhatIf] [<CommonParameters>]

    Start-Transcript [[-Path] <String>] [-Append] [-Confirm] [-Force] [-IncludeInvocationHeader] [-NoClobber] [-WhatIf] [<CommonParameters>]


DESCRIPTION
    The Start-Transcript cmdlet creates a record of all or part of a Windows PowerShell session to a text file. The transcript includes all command that the user types and all output that appears on the console.

    Starting in Windows PowerShell 5.0, Start-Transcript includes the host name in the generated file name of all transcripts. This is especially useful when your enterprise's logging is centralized. Files that are cr
    eated by the Start-Transcript cmdlet include random characters in names to prevent potential overwrites or duplication when two or more transcripts are started simultaneously. This also prevents unauthorized disco
    very of transcripts that are stored in a centralized file share. Additionally in Windows PowerShell 5.0, the Start-Transcript cmdlet works in Windows PowerShell ISE.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821532
    Stop-Transcript

REMARKS
    To see the examples, type: "get-help Start-Transcript -examples".
    For more information, type: "get-help Start-Transcript -detailed".
    For technical information, type: "get-help Start-Transcript -full".
    For online help, type: "get-help Start-Transcript -online"


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-Command): "Get-Command"
>> ParameterBinding(Get-Command): name="ErrorAction"; value="Ignore"
>> ParameterBinding(Get-Command): name="Name"; value="Write-Host"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-46-55.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-46-56.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-46-58.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-47-02.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


PS D:\SICZ\avas> CommandInvocation(Get-PSBreakpoint): "Get-PSBreakpoint"
>> ParameterBinding(Get-PSBreakpoint): name="Type"; value="Command"
>> CommandInvocation(Remove-PSBreakpoint): "Remove-PSBreakpoint"
Transcript started, output file is D:\SICZ\avas/debug-2017-10-06-02-47-22.txt
WARNING: Kontroluji admin prava
WARNING: Skript je nutne spustit s opravneni Administrator!
PS D:\SICZ\avas> @{ 'computerName' = $env:ComputerName; 'processId' = $PID; 'instanceId' = $host.InstanceId }

Name                           Value
----                           -----
processId                      14500
computerName                   DESKTOP-TBE27PS
instanceId                     d383c525-ed6e-400f-b2f4-5236cca6be7e


